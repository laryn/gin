@charset "UTF-8";

#autocomplete {
  margin-block-start: var(--gin-spacing-xxs);
  border-radius: 0 0 var(--gin-border-m) var(--gin-border-m);
  border-style: solid;
  border-width: 0 1px 1px 1px;
  border-color: var(--gin-border-color-form-element);
}

#autocomplete li {
  padding: var(--gin-spacing-xs) var(--gin-spacing-s);
  background: var(--gin-bg-input);
  border-block-end: 1px solid var(--gin-border-color);
  color: var(--gin-color-text);
  font-size: var(--gin-font-size-s);
  font-weight: var(--gin-font-weight-normal);
  line-height: var(--gin-line-height-s);
  transition: var(--gin-transition);
}

[dir="ltr"] #autocomplete li {
  text-align: left;
}

[dir="rtl"] #autocomplete li {
  text-align: right;
}

#autocomplete li:hover {
  background: var(--gin-bg-layer);
  color: var(--gin-color-primary-hover);
}

#autocomplete li.selected {
  background: var(--gin-bg-layer);
  color: var(--gin-color-primary);
}

.ui-autocomplete,
.ui-dialog .ui-autocomplete {
  color: var(--gin-color-text);
  background: var(--gin-bg-input);
  border-radius: 0 0 var(--gin-border-m) var(--gin-border-m);
}

.ui-autocomplete .ui-menu-item-wrapper.ui-state-active,
.ui-dialog .ui-autocomplete .ui-menu-item-wrapper.ui-state-active {
  color: var(--gin-color-primary-hover);
  background-color: var(--gin-bg-item-hover);
}

.ui-state-active, .ui-dialog .ui-state-active,
.ui-widget-content .ui-state-active,
.ui-dialog .ui-widget-content .ui-state-active,
.ui-widget-header .ui-state-active,
.ui-dialog .ui-widget-header .ui-state-active,
a.ui-button:active,
.ui-dialog a.ui-button:active,
.ui-button:active,
.ui-dialog .ui-button:active,
.ui-button.ui-state-active:hover,
.ui-dialog .ui-button.ui-state-active:hover {
  border: none;
}

.ui-autocomplete .ui-menu-item a {
  color: var(--gin-color-text);
}

.ui-autocomplete .ui-menu-item a:hover {
  color: var(--gin-color-primary-hover);
  background-color: var(--gin-bg-item-hover);
}

.ui-widget.ui-widget-content {
  padding: 0;
  border: 1px solid var(--gin-border-color);
}

.js .form-autocomplete {
  transition: var(--gin-transition), background-position none;
}

.js input.form-autocomplete.throbbing,
div.autocomplete-deluxe-container div.autocomplete-deluxe-throbber.autocomplete-deluxe-open {
  background-image: none;
}

.form-autocomplete.throbbing + .claro-autocomplete__message,
div.autocomplete-deluxe-container div.autocomplete-deluxe-throbber.autocomplete-deluxe-open {
  display: block;
}

.form-autocomplete.throbbing + .claro-autocomplete__message::after,
div.autocomplete-deluxe-container div.autocomplete-deluxe-throbber.autocomplete-deluxe-open::after {
  content: "";
  position: absolute;
  top: 35px;
  display: block;
  border: 2px solid var(--gin-bg-input);
  border-radius: 50%;
  border-block-start: 2px solid var(--gin-color-primary);
  width: 14px;
  height: 14px;
  animation: gin-throbber 1s linear infinite;
}

[dir="ltr"] .form-autocomplete.throbbing + .claro-autocomplete__message::after,
[dir="ltr"] div.autocomplete-deluxe-container div.autocomplete-deluxe-throbber.autocomplete-deluxe-open::after {
  right: 12px;
  text-align: right;
}

[dir="rtl"] .form-autocomplete.throbbing + .claro-autocomplete__message::after,
[dir="rtl"] div.autocomplete-deluxe-container div.autocomplete-deluxe-throbber.autocomplete-deluxe-open::after {
  left: 12px;
  text-align: left;
}

div.autocomplete-deluxe-container div.autocomplete-deluxe-throbber.autocomplete-deluxe-open::after {
  top: 2px;
}

div.autocomplete-deluxe-multiple {
  color: var(--gin-color-text);
  background: var(--gin-bg-input);
  border: 1px solid var(--gin-border-color-form-element);
  border-radius: var(--gin-border-m);
  box-sizing: border-box;
  transition: var(--gin-transition);
}

.autocomplete-deluxe-container input.autocomplete-deluxe-form {
  min-height: 0;
  background: none;
}

.autocomplete-deluxe-item {
  color: var(--gin-color-primary-hover);
  background-color: var(--gin-color-primary-light-hover);
  border-radius: var(--gin-border-l);
  border: 0 none;
  box-shadow: none;
}

[dir="ltr"] .autocomplete-deluxe-item {
  padding: 6px var(--gin-spacing-l) 6px 12px;
}

[dir="rtl"] .autocomplete-deluxe-item {
  padding: 6px 12px 6px var(--gin-spacing-l);
}

.autocomplete-deluxe-item:hover, .autocomplete-deluxe-item:active {
  color: var(--gin-color-button-text);
  background-color: var(--gin-color-primary);
}

.autocomplete-deluxe-item .autocomplete-deluxe-item-delete {
  top: 6px;
  -webkit-mask-image: url("../../media/sprite.svg#close-view");
          mask-image: url("../../media/sprite.svg#close-view");
  -webkit-mask-size: 10px 10px;
          mask-size: 10px 10px;
  -webkit-mask-repeat: no-repeat;
          mask-repeat: no-repeat;
  -webkit-mask-position: center;
          mask-position: center;
  background: var(--gin-color-primary);
}

[dir="ltr"] .autocomplete-deluxe-item .autocomplete-deluxe-item-delete {
  right: 6px;
}

[dir="rtl"] .autocomplete-deluxe-item .autocomplete-deluxe-item-delete {
  left: 6px;
}

.autocomplete-deluxe-item:hover .autocomplete-deluxe-item-delete,
.autocomplete-deluxe-item .autocomplete-deluxe-item-delete:hover {
  background: var(--gin-color-button-text);
}

/* Claro additions */

/**
 * @file
 * Visual styles for animated throbber.
 *
 * @see autocomplete.js
 */

/**
 * Since the autocomplete library is attached conditionally and not globally,
 * we can be 99% sure that the default icon will be used.
 * With inline SVGs we can prevent a HTTP request and repaint addressing the
 * autocomplete input's background â€” until are sure that it will be pushed by
 * the server with HTTP/2.
 *
 * The autocompleting (active) state's background-image is inlined because
 * non-used CSS selectors are usually ignored; popular browsers don't download
 * their 'url' references.
 * If these selectors become active, the browser needs some time for painting
 * previously ignored remote asset: it should get it from server, parse it and
 * repaint the background of autocomplete field. With the inlined background we
 * can prevent an additional timeout caused by a new request/response pair.
 * Besides this, the autocompleting event itself may easily finish before the
 * missing asset gets downloaded/parsed/painted, and the missing instant visual
 * feedback would be a usability/accessibility issue as well.
 */

.js input.form-autocomplete {
  background-image: url("../../media/sprite.svg#magnifier-view");
  background-repeat: no-repeat;
  background-size: 36px;
}

[dir="ltr"] .js input.form-autocomplete {
  background-position: 100% 50%;
}

[dir="rtl"] .js input.form-autocomplete {
  background-position: 0% 50%;
}

.js input.form-autocomplete.throbbing {
  background-image: url("../../media/sprite.svg#spinner-view");
}

.js[dir=rtl] input.form-autocomplete {
  background-image: url("../../media/sprite.svg#magnifier-rtl-view");
}

[dir="ltr"] .js[dir=rtl] input.form-autocomplete {
  background-position: 0 50%;
}

[dir="rtl"] .js[dir=rtl] input.form-autocomplete {
  background-position: 100% 50%;
}

.js[dir=rtl] input.form-autocomplete.throbbing {
  background-image: url("../../media/sprite.svg#spinner-rtl-view");
}

/**
 * Autocomplete wrapper for autocompleting message.
 */

.claro-autocomplete {
  position: relative;
  display: inline-block;
  max-width: 100%;
}

.claro-autocomplete__message {
  position: absolute;
  inset-inline-end: 0;
  inset-block-end: 100%;
  max-width: 100%;
  margin-block-end: .15rem;
  color: var(--color-link);
  font-size: var(--font-size-xxs);
  /* ~11px */
  font-weight: bold;
  line-height: 1.125rem;
  /* 18px */
}

